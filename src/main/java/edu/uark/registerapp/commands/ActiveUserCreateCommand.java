package edu.uark.registerapp.commands;

import java.util.Optional;
import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Service;

import edu.uark.registerapp.commands.ResultCommandInterface;
import edu.uark.registerapp.commands.exceptions.ConflictException;
import edu.uark.registerapp.commands.exceptions.UnprocessableEntityException;
import edu.uark.registerapp.models.api.ActiveUser;
import edu.uark.registerapp.models.entities.ActiveUserEntity;
import edu.uark.registerapp.models.repositories.ActiveUserRepository;

@Service
public class ActiveUserCreateCommand implements ResultCommandInterface<ActiveUser> {
	private static final String activeUser = null;

	@Override
	public ActiveUser execute() {
		this.validateProperties();

		final ActiveUserEntity createdActiveUserEntity = this.createActiveUserEntity();

		// // Synchronize information generated by the database upon INSERT.
		this.apiActiveUser.setId(createdActiveUserEntity.getId()); 
		this.apiActiveUser.setCreatedOn(createdActiveUserEntity.getCreatedOn());
		System.out.println("INSIDE ActiveUser CREATE COMMAND EXECUTE()"); 

		return this.apiActiveUser;
	}

	// Helper methods
	private void validateProperties() {
		if (this.apiActiveUser.getEmployeeId() == -1) {
			throw new UnprocessableEntityException("employeeid");
		}
	}

	@Transactional
	public ActiveUserEntity createActiveUserEntity() {
		
		final Optional<ActiveUserEntity> queriedActiveUserEntity =
			this.activeUserRepository
				.findByEmployeeid(this.apiActiveUser.getEmployeeId()); // can convert to UUID type ; Id: primary key

		if (queriedActiveUserEntity.isPresent()) {
			// Lookupcode already defined for another employee.
			throw new ConflictException("id");
		}
			return this.activeUserRepository.save(
				new ActiveUserEntity(apiActiveUser));
	}

	// Properties
	private ActiveUser apiActiveUser;
	public ActiveUser getApiActiveUser() {
		return this.apiActiveUser;
	}
	public ActiveUserCreateCommand setApiActiveUser(final ActiveUser apiActiveUser) {
		this.apiActiveUser = apiActiveUser;
		return this;
	}

	@Autowired
	private ActiveUserRepository activeUserRepository;

}
